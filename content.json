{"meta":{"title":"Tinf's site","subtitle":"","description":"","author":"Tinf","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2022-07-29T04:05:04.000Z","updated":"2022-09-08T09:43:17.216Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":"catagories:-CS"},{"title":"tags","date":"2022-07-30T02:48:02.000Z","updated":"2022-09-08T09:43:17.216Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"BIT","slug":"BIT","date":"2022-08-25T09:41:41.000Z","updated":"2022-09-08T09:43:17.216Z","comments":true,"path":"2022/08/25/BIT/","link":"","permalink":"http://example.com/2022/08/25/BIT/","excerpt":"","text":"BIT(Binary Indexed Tree)","categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"},{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"}]},{"title":"Inversion number","slug":"inversion-number","date":"2022-08-24T11:09:05.000Z","updated":"2022-09-08T09:43:17.216Z","comments":true,"path":"2022/08/24/inversion-number/","link":"","permalink":"http://example.com/2022/08/24/inversion-number/","excerpt":"Inversion Number algorithm Note","text":"Inversion Number algorithm Note 転倒数的意義 簡單來說就是泡泡排序的交換次數但為什麼不直接實做排序再計算次數呢？泡泡搜尋法的最差複雜度為 O(N^2）而使用Bit計算可以達到 O(NlogN) 分析泡泡排序法的交換次數 1. 如何判斷一個數字會交換的次數？ 泡泡搜尋法的交換規則為左邊的值大於右邊的值即發生交換。 2. 計算總交換次數 由此可以得知總交換次數為所有數字之現在位置的左邊大於自己值的個數總和。 相對位置在Ai左邊而值大於Ai之數後簡稱前置大數。 實現計算所有前置大數的原理(與計數排序法counting sort類似) 例題1: Atcoder s001_j 例題2: Atcoder abc264_d 1. BIT內以A的值為index紀錄出現過數字。 index 1 2 3 4 5 6 7 8 9 A: 8 3 6 5 2 4 1 9 7 BIT: index 1 2 3 4 5 6 7 8 9 A: (8) 3 6 5 2 4 1 9 7 BIT: 1 index 1 2 3 4 5 6 7 8 9 A: 8 (3) 6 5 2 4 1 9 7 BIT: 1 1 index 1 2 3 4 5 6 7 8 9 A: 8 3 (6) 5 2 4 1 9 7 BIT: 1 1 1 index 1 2 3 4 5 6 7 8 9 A: 8 3 6 5 (2) 4 1 9 7 BIT: 1 1 1 1 index 1 2 3 4 5 6 7 8 9 A: 8 3 6 5 2 (4) 1 9 7 BIT: 1 1 1 1 1 以此推計算到第六格也就是4的位置得到BIT為011011010，BIT的特性使我們可以快速加總出前綴合，而我們現在要判斷4的前置大數，透過加總BIT中1~4號位可以得出前置小數為2，在用前置數字的數量減去前置小數即可獲得前置大數的數量。關鍵： 做到第幾位就算到第幾位。 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;bits/stdc++.h&gt;using namespace std;#define io ios_base::sync_with_stdio(0), cin.tie(0);typedef long long int ll; int n; struct BIT&#123; private: vector&lt;int&gt; bit; public: BIT(void)&#123; bit.resize(n+1); &#125; int sumup(int x)&#123; int temp = 0; for(int i=x;i&gt;0;i-=i&amp;-i)&#123; temp += bit[i]; &#125; return temp; &#125; void update(int y)&#123; for(int i=y;i&lt;=n;i+=i&amp;-i) bit[i]++; &#125;&#125;; signed main()&#123; cin &gt;&gt; n; vector&lt;int&gt; data(n); for(int i=0;i&lt;n;i++) cin &gt;&gt; data[i]; BIT b; ll ans = 0; for(int i=0;i&lt;n;i++)&#123; ans += i - b.sumup(data[i]); b.update(data[i]); &#125; cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125; 參考資料： 転倒数","categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"},{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"},{"name":"Bit","slug":"Bit","permalink":"http://example.com/tags/Bit/"}]},{"title":"Pointer&Reference","slug":"Pointer","date":"2022-07-30T02:58:23.000Z","updated":"2022-09-08T09:43:17.216Z","comments":true,"path":"2022/07/30/Pointer/","link":"","permalink":"http://example.com/2022/07/30/Pointer/","excerpt":"Cpp Operation Note","text":"Cpp Operation Note 不同於Python及Java, c++同時支援Pointer及Reference。 名詞解釋 Value (值): 記憶體內儲存的變數 Pointer (指標): 存儲變數之記憶體的絕對位置*Pointer會另開記憶體存取地址。 Reference (引用): 調出變數所存在記憶體之絕對位置*Reference導向所附記憶體位置，不另開記憶體。 操作符 (&amp;): 取變數所在之記憶體絕對位置。 操作符 (*): 對記憶體位置取出值。 初始化 Pointer初始化: 1234567891011int a = 5;int *ptr = &amp;a;//orint *ptr;ptr = &amp;a;//ptr = 0x------------;//*ptr = 5; Reference初始化: 123456789101112int a = 5;int &amp;ref = a;//butint &amp;ref;ref = a; // This operation is incorrect.int *ptr = &amp;a;//ref = *ptr = 5;//&amp;ref = ptr = 0x------------; 重新附值: 123456int a = 3;int b = 5;int *ptr;ptr = &amp;a;ptr = &amp;b; Pointer可以重新附值 12345int a = 3;int b = 5;int &amp;ref = a;int &amp;ref = b;//This wil throw an error of &quot;multiple declaration is not allowed&quot; Reference不可被重新附值及宣告 實裝例swap 1. int 123456789101112131415161718#include &lt;bits/stdc++.h&gt; using namespace std; void swap_int(int a, int b)&#123; swap(a, b); cout &lt;&lt; &quot;In function:&quot; &lt;&lt; endl; cout &lt;&lt; &quot; a = &quot; &lt;&lt; endl; cout &lt;&lt; &quot; b = &quot; &lt;&lt; endl; &#125; int main()&#123; int a = 1 ; int b = 2 ; swap_int(a, b); cout &lt;&lt; &quot;In main:&quot; &lt;&lt; endl; cout &lt;&lt; &quot; a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot; b = &quot; &lt;&lt; b &lt;&lt; endl; return 0 ;&#125; output 123456in function: a = 2 b = 1in main: a = 1 b = 2 交換失敗，原因是a,b在main及function中為兩獨立區域變數，不互相干擾。 2. *int 1234567891011121314151617181920212223#include &lt;bits/stdc++.h&gt;using namespace std;void swap_value_ptr(int *ptra, int *ptrb)&#123; swap(*ptra, *ptrb);&#125;int main()&#123; int a = 1 ; int b = 2 ; cout &lt;&lt; &quot;Before swap:&quot; &lt;&lt; endl; cout &lt;&lt; &quot; a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot; b = &quot; &lt;&lt; b &lt;&lt; endl; cout &lt;&lt; &quot; &amp;a = &quot; &lt;&lt; &amp;a &lt;&lt; endl; cout &lt;&lt; &quot; &amp;b = &quot; &lt;&lt; &amp;b &lt;&lt; endl; swap_value_ptr(&amp;a, &amp;b); cout &lt;&lt; &quot;After swap:&quot; &lt;&lt; endl; cout &lt;&lt; &quot; a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot; b = &quot; &lt;&lt; b &lt;&lt; endl; cout &lt;&lt; &quot; &amp;a = &quot; &lt;&lt; &amp;a &lt;&lt; endl; cout &lt;&lt; &quot; &amp;b = &quot; &lt;&lt; &amp;b &lt;&lt; endl; return 0 ;&#125; 將a,b記憶體位置傳入function，並交換兩記憶體內value output 12345678910Before swap: a = 1 b = 2 &amp;a = 0x7ffcdb13f900 &amp;b = 0x7ffcdb13f904After swap: a = 2 b = 1 &amp;a = 0x7ffcdb13f900 &amp;b = 0x7ffcdb13f904 從output可以看出a,b變數之記憶體維持而變數value交換。 3. &int 1234567891011121314151617181920212223#include &lt;bits/stdc++.h&gt;using namespace std;void swap_ref(int &amp;refa, int &amp;refb)&#123; swap(refa, refb);&#125;int main()&#123; int a = 1 ; int b = 2 ; cout &lt;&lt; &quot;Before swap:&quot; &lt;&lt; endl; cout &lt;&lt; &quot; a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot; b = &quot; &lt;&lt; b &lt;&lt; endl; cout &lt;&lt; &quot; &amp;a = &quot; &lt;&lt; &amp;a &lt;&lt; endl; cout &lt;&lt; &quot; &amp;b = &quot; &lt;&lt; &amp;b &lt;&lt; endl; swap_ref(a, b); cout &lt;&lt; &quot;After swap:&quot; &lt;&lt; endl; cout &lt;&lt; &quot; a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot; b = &quot; &lt;&lt; b &lt;&lt; endl; cout &lt;&lt; &quot; &amp;a = &quot; &lt;&lt; &amp;a &lt;&lt; endl; cout &lt;&lt; &quot; &amp;b = &quot; &lt;&lt; &amp;b &lt;&lt; endl; return 0 ;&#125; 原理同上一個，改用引用方式調換value output 1234567891011Before swap: a = 1 b = 2 &amp;a = 0x7ffd068869c0 &amp;b = 0x7ffd068869c41After swap: a = 2 b = 1 &amp;a = 0x7ffd068869c0 &amp;b = 0x7ffd068869c4 從output可以看出a,b變數之記憶體維持而變數value交換。 參考資料： [C++基礎]019_指針和引用（int、int&amp;、int&amp;、int&amp;*、int**）, Pointers vs References in C++","categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"Bit operation","slug":"Bit","date":"2022-07-27T09:15:13.000Z","updated":"2022-09-08T09:43:17.216Z","comments":true,"path":"2022/07/27/Bit/","link":"","permalink":"http://example.com/2022/07/27/Bit/","excerpt":"Bit algorithm Note","text":"Bit algorithm Note About Bit (Binary Digit) C++可支援0b字首建立二進位，C語言則否。 1int n = 0b1010111100011100; // 44828 Most Significant Bit / Least Significant Bit 最高有效位元（最左位元）、最低有效位元（最右位元）。簡稱MSB, LSB Bitwise Operation Bitwise shift 0101 &lt;&lt; 1010; &#x2F;&#x2F; 9 &#x3D;&gt; 181010 &gt;&gt; 0101; &#x2F;&#x2F; 18 &#x3D;&gt; 9 Bitwise AND(&) 0 &amp; 0 &#x3D; 01 &amp; 0 &#x3D; 00 &amp; 1 &#x3D; 01 &amp; 1 &#x3D; 1 用＆計算二進位數字中1的個數 1234567int count_bit_1(int n)&#123; int count = 0; for (; n; n&gt;&gt;=1) // n&gt;&gt;=1 刪掉n的最右位元。 if (n &amp; 1) count++; return count; Bitwise OR(|) 0 | 0 &#x3D; 00 | 1 &#x3D; 11 | 0 &#x3D; 11 | 1 &#x3D; 1 用｜強制將數字轉為1 1234int mark_5th_bit(int n)&#123; return n | (1 &lt;&lt; 4);&#125; Bitwise XOR(^) 0 ^ 0 &#x3D; 00 ^ 1 &#x3D; 11 ^ 0 &#x3D; 11 ^ 1 &#x3D; 0 用^顛倒位元 1234int reverse_5th_bit(int n)&#123; return n ^ (1 &lt;&lt; 4);&#125; Bitwise NOT(~) ~ 0 &#x3D; 1~ 1 &#x3D; 0 Not 翻轉所有位元 *補充 signed 變數沒有定義bit右移時的補充位元，因此在使用 >> 時容易出錯。 因此使用位元運算考慮使用usigned變數。 Bitwise tricks 2的n次冪 二進位數一次左移表示為十進位為乘2, 且運算度快於十進位數字乘以2。 123unsigned int n = 5;n &lt;&lt;= 2; // n * 2 ** 2 = 20;n &gt;&gt;= 1; // n / 2 ** 1 = 2; Bitset 一個 int 變數當作一個集合，一個位元當作一個元素。 參考資料： Bit-演算法筆記","categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"},{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"},{"name":"Bit","slug":"Bit","permalink":"http://example.com/tags/Bit/"}]},{"title":"DP","slug":"DP","date":"2022-07-26T10:23:57.000Z","updated":"2022-09-08T09:43:17.216Z","comments":true,"path":"2022/07/26/DP/","link":"","permalink":"http://example.com/2022/07/26/DP/","excerpt":"","text":"","categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"},{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"}]},{"title":"MySQL Notes","slug":"MySQL-Notes","date":"2022-07-26T10:23:57.000Z","updated":"2022-09-08T09:43:17.216Z","comments":true,"path":"2022/07/26/MySQL-Notes/","link":"","permalink":"http://example.com/2022/07/26/MySQL-Notes/","excerpt":"MySQL Coursera Note","text":"MySQL Coursera Note Prepare Env (on Ubuntu) Install MySQL 1sudo apt update &amp;&amp; sudo apt install mysql-server Put server on 1sudo service mysql start Log in to the server 1mysql -u root -p 預設密碼為root 2. WHERE 創建所有關聯式資料集臨時表後再過濾資料 Basic operations (On MySQL-cli) 顯示Server上所有資料庫 1SHOW DATABASES; 創建資料庫 1CREATA DATABASES &quot;Database&#x27;s name&quot;; 選擇使用的資料庫 1USE &quot;Database&#x27;s name&quot;; 創建表格 1234567CREATE TABLE &quot;Table&#x27;s name&quot;( &quot;Column&#x27;s name&quot; &quot;DataType&quot; (&quot;limmit&quot;), &quot;Column&#x27;s name&quot; &quot;DataType&quot; (&quot;limmit&quot;), . . .); 顯示表格內各欄位設定 1DESCRIBE &quot;Table&#x27;s name&quot;; 新增資料至表格 1INSERT INTO &quot;Table&#x27;s name&quot; (&quot;column1&quot;, &quot;column2&quot;, ...) VALUES (&quot;Data1&quot;, &quot;Data2&quot;, ...); 從表格刪除資料(有條件) 1DELETE FROM &quot;Table&#x27;s name&quot; (WHERE &quot;Condition&quot;); 更新表格內資料 1UPDATE &quot;Table&#x27;s name&quot; SET &quot;Target column&#x27;s name&quot; = &quot;New content&quot; WHERE &quot;Target column&#x27;s name&quot; = &quot;Target content&quot; 顯示表格內資料(帶條件)(排序)(特定關鍵字) 1SELECT * FROM &quot;Table&#x27;s name&quot; (WHERE &quot;condition&quot;) (ORDER BY &quot;Column&#x27;s name&quot;) (WHERE &quot;Column&#x27;s name&quot; LIKE &#x27;%&quot;Keyword&quot;%&#x27;); 計算表格內資料筆數(帶條件) 1SELECT COUNT(*) FROM &quot;Table&#x27;s name&quot; (WHERE &quot;Condition&quot;); 修改Table內Column 12ALTER TABLE &quot;Table&#x27;s name&quot; DROP/ADD COLUMN &quot;column&#x27;s name&quot;; Data Types String Understand character sets and indexable for searching CHAR : Allocates the entire space (for small strings and unknow length) VARCHAR : Depending on the date length (less space) Usage: normal string data Text Have a character set but not used with index or sorting and can only prefix TINYTEXT : up to 255 characters TEXT : up to 65K MEDIUMTEXT : up to 16M LONGTEXT : up to 16G Usage: paragraphs or HTML pages Binary Type 8-32 bits depending on character set and not indexed or sorted BYTE : up to 255 bytes VARBINARY : up to 65K bytes Usage: small image or sensor signal Binary Large Object(BLOB) No translation, index, or character set TINYBLOB : up to 255 bytes BLOB : up to 65K MEDIUMBLOB : up to 16M LONGBLOB : up to 4G Usage: Large raw data, files, images, word doc, PDFs, movies Interger little storage, easy to compare, sort , indexed TINYINT : (-128, +128) SMALLINT : (-32768, +32768) INT : (2 Billion) BIGINT : (10**18 ish) Usage: small image or sensor signal Float Wide range of values but limmilted accuracy FLOAT(32-bit) : 10**38 with 7 digits accuracy DOUBLE(64-bit) : 10**308 with 14 digits accuracy Usage: Scientific data Dates Represent time with integer TIMESTAMP : ‘YYYY-MM-DD HH:MM:SS’(1970, 2037) DATETIME : ‘YYYY-MM-DD HH:MM:SS’ DATE : ‘YYYY-MM-DD’ TIME: ‘HH:MM:SS’ Buit-in MySQL function NOW() 關聯式資料集 1. 構思資料庫關係圖 Find the core of the database Use the core to create the first table Put non-duplicate columns into the first table Find relation between other columns and point to more table 2. 標準資料型態 Do not replicate data, use point Use integers for keys Add special ‘key’ column to each table, for reference (By AUTO_INCREMENT) 3. 創建關聯式資料集 code 4. 創建臨時表格 Merge multilple databases and list all combinations 1Database1 JOIN Database2 JOIN ... Filter to prevent JOIN from output all the combinations 1ON &quot;Foreign key of Database1&quot; = &quot;Foreign key of database2&quot; Automatically delete date while related data was updated 1ON DELETE CASCADE 5. 多對多關聯式資料集 Types of keys Primary key : Generally an integer AUTO_INCREMENT field Logical key : Generally a string for UI application to search (do not use logical key as primary key!!!) Foreign key : Generally an integer pointing to another table 條件判斷式差別 資料處理順序 掃描資料集關聯 => 創建臨時表 => 進行計算 => 輸出 1. ON 過濾關聯式資料集後創建臨時表 2. WHERE 創建所有關聯式資料集臨時表後過濾資料 3. HAVING 創建所有關聯式資料集臨時表並進行完統計後再輸出前過濾 運行效率 處理資料數量由上至下遞減，也因此處理速度由上至下減慢 踩雷筆記 GROUP BY 錯誤 使用資料庫 code 操作 1234SELECT DISTINCT (Genre.name), Artist.nameFROM Track JOIN Album JOIN Artist JOIN GenreWHERE Track.album_id = Album.album_id AND Track.genre_id = Genre.genre_id and Artist.artist_id = Album.artist_idGROUP BY Artist.name; 報錯 1ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#x27;music.Genre.name&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by 解決 Terminal 1sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 最後一行加上 1sql_mode = &quot;&quot;","categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"},{"name":"Coursera","slug":"Coursera","permalink":"http://example.com/tags/Coursera/"}]}],"categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"},{"name":"algorithm","slug":"algorithm","permalink":"http://example.com/tags/algorithm/"},{"name":"Bit","slug":"Bit","permalink":"http://example.com/tags/Bit/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"Coursera","slug":"Coursera","permalink":"http://example.com/tags/Coursera/"}]}